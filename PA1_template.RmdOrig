---
title: "Reproducible Research: Peer Assessment 1"
output: 
  html_document:
    keep_md: true
---


## Loading and preprocessing the data
```{r, echo=TRUE}
# Load the CSV and clean data - make it tidy
unzip("data/activity.zip")
activity <- read.csv("Data/repdata_data_activity/activity.csv")
#  interval time as factor
activity$interval <- as.factor(activity$interval)
```

## What is mean total number of steps taken per day?
```{r, echo=TRUE}
totalStepsPerDay <- vector()        #  Empty vector of total steps for each day

days <- unique(activity$date)       #  Vector of days to process
#  Loop to compute total number of steps for each day
for(day in days){
      #  Create vector of step in each interval for one day
      stps <- subset(activity, date == day, steps)$steps
      total <- sum(stps, na.rm = TRUE)
      totalStepsPerDay  <- c(totalStepsPerDay, total)
      
}
# Display histogram of number of day by number of steps
hist(totalStepsPerDay, xlab = "Total Steps", ylab = " Number of Days", 
     main = "Histogram of Total Steps in Day", breaks = 50 )
#  Calculate and print the mean and median steps per day
meanSteps   = round(mean(  totalStepsPerDay))  #  fraction of steps don't make sense 
medianSteps = median(totalStepsPerDay)
print(paste("Mean   steps per day ", as.character(meanSteps)))
print(paste("Median steps per day ", as.character(medianSteps)))
```


## What is the average daily activity pattern?
```{r, echo=TRUE}
avgStepsPerInterval <- vector()  #  empty vector of average steps per interval
intervals <- unique(activity$interval)  #  list of intervals
#  Loop to compute daily average for each interval - ignoring NA values
for( inv in intervals)  {
     steps <- subset(activity, interval == inv, steps )$steps  #  daily steps for this interval
      avgSteps <- mean(steps, na.rm = TRUE)                       # average steps
      avgStepsPerInterval <- c(avgStepsPerInterval, avgSteps)     # average steps vector
}
#  plot daily activity
plot(intervals, avgStepsPerInterval, type = "l", xlab = "5 Minute Interval", ylab = "Average Steps", main = "Activity Pattern")

maxAvg <- intervals[which.max(avgStepsPerInterval)]  #  determine index of interval with max average
print(paste("5 Minute Interval with maximum average number of steps is ",as.character(maxAvg)))
```


## Imputing missing values
```{r, echo=TRUE}
#  determine number of missing values
missingValues <- is.na(activity$steps)  #  creates a vector of booleans where TRUE => NA
print(sum(missingValues))  #  summing the booleans => number of NA

avgInt <- data.frame(intervals, avgStepsPerInterval)  # create data frame of intervals and average steps
#impute missing values
newActivity <- activity  #  create copy of activity df
for(indx in which(missingValues)){  #  loop through steps equal to NA
      if(missingValues[indx]){
            invVal <- newActivity[indx,3]  #  identify the inverval value
            avgStep <- avgInt[avgInt$intervals == invVal,2]
            newActivity[indx,1] <- avgStep
      }
      
}
days <- unique(newActivity$date)

for(day in days){
      stps <- subset(newActivity, date == day, steps)$steps
      #str(stps)
      totalStepsPerDay  <- c(totalStepsPerDay, sum(stps, na.rm = TRUE))      
}
hist(totalStepsPerDay, xlab = "Total Steps", ylab = " Number of Days", 
     main = "Histogram of Total Steps in Day with NAs Removed", breaks = 50 )

newMeanSteps   = round(mean(  totalStepsPerDay))
newMedianSteps = median(totalStepsPerDay)
print(paste("Mean   steps per day with NAs removed ", as.character(newMeanSteps)))
print(paste("Median steps per day with NAs removed ", as.character(newMedianSteps)))
```
### Impact of Removing NA steps values
```{r, echo=TRUE}
diffMeanSteps = newMeanSteps - meanSteps
diffMedianSteps = newMedianSteps - medianSteps
print(paste("Change in mean   steps per day with NAs removed ", as.character(diffMeanSteps)))
print(paste("Change in median steps per day with NAs removed ", as.character(diffMedianSteps)))

```


## Are there differences in activity patterns between weekdays and weekends?
```{r, echo=TRUE}
#    Isolate dates and Date
weekdy <- weekdays( as.Date(newActivity$date))

#  Create T/F vector of weekend days
weekends <- weekdy == "Sunday" | weekdy == "Saturday"

#  add new column indicating if date is a weekend or weekday
newActivity$wkpart <- as.factor(c("weekday","weekend"))
newActivity[weekends,]$wkpart <- as.factor("weekend")  #  weekend
newActivity[!weekends,]$wkpart <- as.factor("weekday") #  weekday

library(dplyr)
#  calculate activity means by interval for weekend
wkpart <- filter(newActivity, wkpart == "weekend")  #  isolate weekends
#                    steps       interval
wkendMeans <- tapply(wkpart[,1], wkpart[,3], mean)

#  plot Interval vs Mean Step for weekend
plot(names(wkendMeans), wkendMeans, type = "l", xlab = "Interval", ylab = "Mean Steps", main = "Weekend Activity Levels")

#  calculate activity means by interval for weekday
wkpart <- filter(newActivity, wkpart == "weekday")  #  isolate weekdays
#                    steps       interval
wkdayMeans <- tapply(wkpart[,1], wkpart[,3], mean)
plot(names(wkdayMeans), wkdayMeans, type = "l", xlab = "Interval", ylab = "Mean Steps", main = "Weekday Activity Levels")

wkdiff <- wkendMeans - wkdayMeans
plot(names(wkdiff), wkdiff, type = "l", xlab = "Interval", ylab = "Difference in Mean Steps", main = "Activity Level Differences (Weekend - Weekday)" )
```

